Start Training ...................................

          Initializing TSN with base model: BNInception.
          TSN Configurations:
              input_modality:     RGB
              num_segments:       3
              new_length:         1
              consensus_module:   avg
              dropout_ratio:      0.8
               
Load and modify the standard model FC output layer
Dropout Layer added and The modified linear layer is : Linear(in_features=1024, out_features=101, bias=True)
Done. Loading and Modifying 
 ---------------------------------------------------
---------------------------------------------------
group: first_conv_weight has 1 params, lr_mult: 1, decay_mult: 1
group: first_conv_bias has 1 params, lr_mult: 2, decay_mult: 0
group: normal_weight has 69 params, lr_mult: 1, decay_mult: 1
group: normal_bias has 69 params, lr_mult: 2, decay_mult: 0
group: BN scale/shift has 2 params, lr_mult: 1, decay_mult: 0
---------------------------------------------------
Traceback (most recent call last):
  File "main.py", line 391, in <module>
    main()
  File "main.py", line 144, in main
    train(train_loader, model, criterion, optimizer, epoch)
  File "main.py", line 207, in train
    output = model(input)
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/parallel/data_parallel.py", line 143, in forward
    outputs = self.parallel_apply(replicas, inputs, kwargs)
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/parallel/data_parallel.py", line 153, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/parallel/parallel_apply.py", line 83, in parallel_apply
    raise output
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/parallel/parallel_apply.py", line 59, in _worker
    output = module(*input, **kwargs)
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/lfs01/workdirs/alex039/alex039u2/tsn_paper/server_scripts/real-time-action-recognition/Modified_CNN.py", line 309, in forward
    FProp = self.base_model(input) 
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/lfs01/workdirs/alex039/alex039u2/tsn_paper/server_scripts/real-time-action-recognition/net/bn_inception.py", line 1300, in forward
    x = self.features(input)
  File "/lfs01/workdirs/alex039/alex039u2/tsn_paper/server_scripts/real-time-action-recognition/net/bn_inception.py", line 757, in features
    inception_3b_output_out
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/modules/pooling.py", line 148, in forward
    self.return_indices)
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/_jit_internal.py", line 132, in fn
    return if_false(*args, **kwargs)
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/functional.py", line 425, in _max_pool2d
    input, kernel_size, stride, padding, dilation, ceil_mode)[0]
  File "/home/alex039u2/data/anaconda3/lib/python3.7/site-packages/torch/nn/functional.py", line 417, in max_pool2d_with_indices
    return torch._C._nn.max_pool2d_with_indices(input, kernel_size, _stride, padding, dilation, ceil_mode)
RuntimeError: CUDA out of memory. Tried to allocate 183.75 MiB (GPU 0; 11.17 GiB total capacity; 10.68 GiB already allocated; 96.38 MiB free; 90.06 MiB cached)
End of Training .................................
